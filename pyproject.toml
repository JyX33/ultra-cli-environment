[project]
name = "ai_reddit_agent"
version = "0.1.0"
description = "AI Reddit News Agent - Automated Reddit discussion analysis and report generation"
authors = [{name = "Developer", email = "dev@example.com"}]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.115.12",
    "uvicorn>=0.34.3",
    "praw>=7.8.1",
    "requests>=2.32.3",
    "beautifulsoup4>=4.13.4",
    "openai>=1.84.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-mock>=3.14.1",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-mock>=3.14.1",
    "requests-mock>=1.12.1",
    "psutil>=6.1.1",
    "mypy>=1.16.0",
    "ruff>=0.11.13",
    "types-requests>=2.32.4.20250611",
    "types-beautifulsoup4>=4.12.0.20250516",
]

# ===================================
# MyPy Configuration
# ===================================
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "praw.*",
    "requests_mock.*",
    "psutil.*",
]
ignore_missing_imports = true

# ===================================
# Ruff Configuration
# ===================================
[tool.ruff]
target-version = "py39"
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable aggressive linting
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "A",    # flake8-builtins
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that might be too aggressive
ignore = [
    "S101",  # Use of assert (pytest uses assert)
    "S311",  # Standard pseudo-random generators (not crypto)
    "B008",  # Do not perform function calls in argument defaults
    "E501",  # Line too long (handled by formatter)
    "N806",  # Variable in function should be lowercase (conflicts with API naming)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values and longer lines
"tests/*" = ["S", "PLR2004", "E501"]
# Scripts can have print statements
"scripts/*" = ["T201"]

[tool.ruff.format]
# Use single quotes for strings.
quote-style = "double"
# Indent with spaces, rather than tabs.
indent-style = "space"
# Respect magic trailing commas.
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true
